'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _draftJs = require('draft-js');

exports.default = function (editorState, types) {
  var selection = editorState.getSelection();
  if (!selection.isCollapsed() || selection.getAnchorOffset() || selection.getFocusOffset()) {
    return null;
  }

  // First, try to remove a preceding atomic block.
  var content = editorState.getCurrentContent();
  var startKey = selection.getStartKey();
  var blockAfter = content.getBlockAfter(startKey);

  // If the current block is empty, just delete it.
  if (blockAfter && content.getBlockForKey(startKey).getLength() === 0) {
    return null;
  }

  var blockBefore = content.getBlockBefore(startKey);

  if (blockBefore && types.indexOf(blockBefore.getType()) !== -1) {
    var atomicBlockTarget = selection.merge({
      anchorKey: blockBefore.getKey(),
      anchorOffset: 0
    });
    var asCurrentStyle = _draftJs.Modifier.setBlockType(content, atomicBlockTarget, content.getBlockForKey(startKey).getType());
    var withoutAtomicBlock = _draftJs.Modifier.removeRange(asCurrentStyle, atomicBlockTarget, 'backward');
    if (withoutAtomicBlock !== content) {
      return _draftJs.EditorState.push(editorState, withoutAtomicBlock, 'remove-range');
    }
  }

  // If that doesn't succeed, try to remove the current block style.
  var withoutBlockStyle = _draftJs.RichUtils.tryToRemoveBlockStyle(editorState);

  if (withoutBlockStyle) {
    return _draftJs.EditorState.push(editorState, withoutBlockStyle, 'change-block-type');
  }

  return null;
};