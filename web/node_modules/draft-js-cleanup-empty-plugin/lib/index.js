'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cleanupTypes = exports.cleanupType = undefined;

var _onBackspace = require('./utils/onBackspace');

var _onBackspace2 = _interopRequireDefault(_onBackspace);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

// Block-Types to be handled will be stored here
var types = [];
var cleanupEmptyPlugin = function cleanupEmptyPlugin(options) {
  types = options.types || [];
  return {
    handleKeyCommand: function handleKeyCommand(command, _ref) {
      var getEditorState = _ref.getEditorState;
      var setEditorState = _ref.setEditorState;

      var editorState = getEditorState();
      var newEditorState = null;
      if (command.indexOf('backspace') === 0) {
        newEditorState = (0, _onBackspace2.default)(editorState, types);
      }

      if (newEditorState) {
        setEditorState(newEditorState);
        return true;
      }return false;
    }
  };
};

exports.default = cleanupEmptyPlugin;

// Use this to add one type to the list

var cleanupType = exports.cleanupType = function cleanupType(item) {
  return types.push(item);
};

// Use this to add multiple types to the list
var cleanupTypes = exports.cleanupTypes = function cleanupTypes(items) {
  var _types;

  return (_types = types).push.apply(_types, _toConsumableArray(items));
};